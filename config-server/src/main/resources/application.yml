spring:
  application:
    name: config-server
  cloud:
    config:
      server:
        accept-empty: false
  profiles:
    active: git
eureka:
  instance:
    prefer-ip-address: true
    hostname: ${spring.application.name}
  client:
    serviceUrl:
      defaultZone: http://registry-server-1:8091/eureka/,http://registry-server-2:8092/eureka/,http://registry-server-3:8093/eureka/
server:
  port: 8888
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: ALWAYS
---
spring:
  profiles: git
  cloud:
    config:
      server:
        git:
          uri: https://github.com/LikeSimple/spring-cloud-config
          refresh-rate: 15 # 默认为0，即每次请求都刷新远程信息；否则为指定多久后才刷新
          default-label: master # 指定默认版本，可以是commit id, tag, branch name
          search-paths: {application} # 指定搜索子路径以及搜索格式 repos, {application}/{profile}/{label}
          timeout: 5
#          force-pull: true
#          deleteUntrackedBranches: true
#          clone-on-start: true
#          模板形式
#          repos:
#            development:
#              pattern:
#                - '*/development'
#                - '*/staging'
#              cloneOnStart: true
#              uri: https://github.com/development/config-repo
#              username: trolley
#              password: strongpassword
#              或者也可以使用ssh形式，会使用~/.ssh/下的配置 ，只支持rsa形式，Git服务器应在known_hosts文件中，HTTPS PROXY则配置在~/.git/config中或者使用启动参数-Dhttps.proxyHost and -Dhttps.proxyPort
---
spring:
  profiles: local # 本地Git Clone库形式
  cloud:
    config:
      server:
        git:
          uri: file://${user.home}/develop/config-repo # 当URI以file开头，则直接读取本地clone目录，主要用于测试，如果在生产环境需要以共享目录形式给所有的配置服务器挂载；该目录为默认搜索
          refresh-rate: 15 # 默认为0，即每次请求都刷新远程信息；否则为指定多久后才刷新
          default-label: master # 指定默认版本，可以是commit id, tag, branch name
          search-paths: repos* # 子目录搜索，支持目录通配符
          timeout: 5

---
spring:
  profiles: native # 本地文件系统形式
  cloud:
    config:
      server:
        native:
          search-locations: classpath:/config, file:./{application}/{profile}/{label}
---
spring:
  profiles: vault # 以vault加密kv库作为后端形式
  cloud:
    config:
      server:
        vault:
          host: 127.0.0.1
          port: 8200
          scheme: http
          backend: secret
          default-key: application
          profile-separator: ","
          kv-version: 2 # For vault version >= 0.10.0
          skip-ssl-validation: false
          timeout: 5
          namespace: null